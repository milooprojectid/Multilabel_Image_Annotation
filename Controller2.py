#! /usr/bin/env python
#
# Support module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Feb 16, 2018 07:32:02 PM


import sys
from keras import models
import PIL as pl
from PIL import Image, ImageTk
from tkinter import filedialog
import h5py
import numpy as np
# f_in = h5py.File('./test/TESTFIX2.hdf5', 'r')
# y_test = f_in['test_name']
# y_lab = f_in['test_labels']
model_path = './saved_models/modelFIXBNDO75.h5'
model = models.load_model(model_path)
# print(model.summary())
try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

def outputimage(img):
    im2 = img.resize((486,283),pl.Image.ANTIALIAS)
    im2 = ImageTk.PhotoImage(im2)
    w.Canvas1.image = im2
    w.Canvas1.create_image(0,0,image=im2,anchor="nw")
    sys.stdout.flush()

def func_open(p1):
    global data
    try:
        img = filedialog.askopenfilename()
        direk = img.split('/')
        w.LabelPred.configure(text='')
        img = pl.Image.open(img).convert('RGB')
        img = img.resize((224, 224), pl.Image.ANTIALIAS)
        data = np.array(img)
        outputimage(img)
        names = str(direk[-2] + '\\' + direk[-1])
        print(names)
        ak = []
        aku = cekName(y_test, names)
        if(aku != ''):
            ak.append(np.ndarray.tolist(aku))
            ak = np.array(ak)
            print(ak.shape)
            if(ak.shape[1] == 30):
                kelas2 = showClass(ak)
                print(kelas2)
                w.Actual.configure(text=str(kelas2))
        else:
            kelas2 = 'No Label'
            w.Actual.configure(text=str(kelas2))
        # print(aku)
    except ImportError:
        print('Gambar tidak dapat diload')
    # print('Coba2_support.func_open')
    sys.stdout.flush()

def showClass(y_pred):
    classes = ['window', 'waterfall', 'water', 'valley', 'town', 'temple', 'sunset', 'street', 'snow', 'sky', 'road',
               'reflection', 'railroad', 'plants', 'ocean', 'night_time', 'mountain', 'moon', 'lake', 'house', 'harbor',
               'grass', 'glacier', 'garden', 'frost', 'clouds', 'cityscape', 'buildings', 'bridge', 'beach']
    labels = []
    for i in range(30):
        # print(y_pred[0,i])
        if (y_pred[0,i] == 1):
            labels.append(classes[i])
    return labels
def cekName(y_test,name):
    x = ''
    for i,y_name in enumerate(y_test):
        # print(y_name)
        nama = y_name.split()
        # print(nama[-1])
        if(nama[-1] == name):
            print('Ada')
            x = y_lab[i]
    return x
def func_predict(p1):
    data2 = np.expand_dims(data, axis=0)
    prediction = []
    preds = model.predict(data2)
    top_k_indx = np.argsort(preds[0])[:-(5 + 1):-1]
    aaa = np.zeros([1, 30], dtype=int)
    print(aaa.shape)
    y_pred = []
    y_lab = []
    for j in top_k_indx:
        aaa[0][j] = 1
    y_pred.append(aaa[0])
    y_pred = np.array(aaa)
    # prediction.append(aaa[0])
    kelas = showClass(aaa)
    print(aaa)
    print(kelas)
    w.LabelPred.configure(text=str(kelas))

    print('Coba2_support.func_predict')
    sys.stdout.flush()

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import GUI2
    GUI2.vp_start_gui()

